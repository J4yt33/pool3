/*
 Dateiname : analyse.c
 Programm  : Gleitende Mittelwertberechnung über Messwerte derselben Messstelle
             Beispielhafte Musterlösung für Aufgabe 001 aus POOL3
 Eingaben  : keine (beim Programmaufruf)
             Programmaufruf über Konsole. Aufruf mit: ./analyse
 Ausgaben  : nicht verwendet (immer 0)
 Autor     :
 Version   : 01   vom   2013-01-09
 */

#include "analyse.h"

/*
 Funktion  : word16 BerechneMittelwerte(Messung *md, word16 MesswertId, word16 MittelwertFenster, word16 AnzahlMesswerte, word16 *mpId)
 Aufgabe   : Berechnet die gleitenden Mittelwerte (double) ueber MittelwertFenster Messwerte (int) der
 	 	 	 Messtelle <MesswertId> aus dem nach aufsteigender MesswertId geordneten Messwertevektor md.
 	 	 	 Fuer die ersten MittelwertFenster-1 Messwerte wird als Mittelwert der Messwert genommen und
 	 	 	 als Status fuer den Mittelwert 1 gesetzt. Fuer berechnete Mittelwerte ist der Status 0.
 Eingaben  : md = strukturierter Messwertevektor enthält Messwerte aller gelesenen Messstellen, wobei
             die Messwerte einer Messtelle zeitlich und die Messstellen num. aufsteigend geordnet sind
             MesswertId = Messtelle, fuer die die Mittelwerte berechnet werden
             MittelwertFenster = Anzahl der in den Mittelwert einzubeziehenden Messwerte der Messstelle
             AnzahlMesswerte = Gesamtzahl der Messwerte im Messwertevektor
             mpId = Vektor mit Anzahl der Messzeitpunkte (Messwerte) je Messstelle
 Ausgaben  : Anzahl der berechneten Mittelwerte
 Autor     :
 Version   : 01
 Datum der letzten Änderung: 2013-01-09
 */
word16 BerechneMittelwerte(Messung *md, word16 MesswertId, word16 MittelwertFenster, word16 AnzahlMesswerte, word16 *mpId){
	char AusgabeDatei[100]={'0'};
	char AusgabeZeileWerte[100]; //Nimmt Messwerte auf formatiert zur Ausgabe in Datei
	char AusgabeZeileLegende[100];//Beschriftung der Messwerte in Datei
	char FormatStr[]="\n%15d\t%14d\t%28g\t%6d";
	word16 StartIndex=0;
	word16 AnzahlMittelwerte=0;
	struct{
		word16 ZeitIndex;
		word16 Status;
		double MWert;
		word32 Wert;

	} Mittelwert[MAXMESSZEITPUNKTE]={{0}};
	//double Mittelwert[MAXMESSZEITPUNKTE]={0};
	word32 PosOrgStrkt=0; //position im originalen array
	word16 AktuellerMesswert=0;
	word32 SummeFensterWerte=0;
	word16 Divisor=0;
	word16 i=0;
	word32 Summand=0; //zum auswählen der summanden für das mittelwertfenster
	FILE *fp;
	word32 PosMw=0; //position im Mittelwertfeld

	printf("Messzeitpunkt\tMesswert\tMittelwert\t\tStatus\n");



	//berechne alle für die id gemessenen werte
	for(PosOrgStrkt=MAXMESSZEITPUNKTE*MesswertId;PosOrgStrkt<mpId[MesswertId]+MAXMESSZEITPUNKTE*MesswertId;PosOrgStrkt++){
		//bis mwFenster möglich ubernehme den messwert als mittelwert
		//MittelwertFenster-1 da bei 0 angefangen wird zu zählen
		if(PosOrgStrkt<(MittelwertFenster-1)+MAXMESSZEITPUNKTE*MesswertId){
			//übernehme messwert als mittelwert
			Mittelwert[PosMw].MWert=(double)(md+PosOrgStrkt)->Wert;
			//setzte status = 1
			Mittelwert[PosMw].Status=((md+PosOrgStrkt)->Status)+1;
			//Mittelwert[PosMw].Status=Mittelwert[PosMw].Status+1;
		}else{
			//berechne mittelwert
			//summiere das mittelwertfenster auf, also alle werte von i bis i-MwFenster
			for(Summand=0;Summand<MittelwertFenster;Summand++){
				SummeFensterWerte=SummeFensterWerte+(md+PosOrgStrkt-Summand)->Wert;
			}
			//berechne mittelwert mit der summe der werte im mittelwertfenster geteilt durch das mittelwertfenster
			Mittelwert[PosMw].MWert=(double)SummeFensterWerte/MittelwertFenster;
			//rücksetzen der Summe für die nächste berechnung
			SummeFensterWerte=0;
			//setze status =0
			Mittelwert[PosMw].Status=(md+PosOrgStrkt)->Status+0;
			//Mittelwert[PosMwWert].Status[1]=0;
		}

		//Zeitindex in neue struktur mitübernehmen
		Mittelwert[PosMw].ZeitIndex=(md+PosOrgStrkt)->ZeitIndex;

		//Messwert in neue struktur übernehmen
		Mittelwert[PosMw].Wert=(md+PosOrgStrkt)->Wert;

		//springe in der neuen struktur eine zeile weiter
		PosMw++;
		//nächsten Mittelwert berechnen
	}


	//ausgabe der ergebnisse in textdatei benannt nach folgender syntax mittelwerte_<M>_<N>.txt wobei M die Messstellen Id ist und N das Mittelwertfenster



	//Ausgabename erstellen
	sprintf(AusgabeDatei,"mittelwerte_%i_%i.txt",MesswertId,MittelwertFenster);

	//ausgabedatei erstellen
	if( (fp=fopen(AusgabeDatei,"w+")) == NULL) {
		//fehlermeldung, falls die datei nicht erstellt werden kann.
		printf("Kann datei nicht erstellen.\nDrücken sie enter zum beenden");
		//eingabeaufforderung
		scanf("%c",AusgabeDatei);
		return 0;
	}

	//AusgabeZeile für Legende erstellen
	sprintf(AusgabeZeileLegende,"Messzeitpunkt\t\tMesswert\t\tMittelwert über %i\t Status\n\t\t\tT\t\t\tX%i(T)\t\t\tMesswerte\n",MittelwertFenster,MesswertId);


	//Ausgabe der Wertebezeichner(Legende) in formatiert in Datei
	fputs(AusgabeZeileLegende,fp);

	//gib alle berechneten Mittelwerte und alle nicht berechenbaren werte für diese id formatiert in Datei
	for(PosMw=0;PosMw<mpId[MesswertId];PosMw++){
		//AusgabeZeile für Werte erstellen mit status *1, für diese werte wird aufgrund des mittelwertfensters als mittelwert der messwert übernommen
		if(Mittelwert[PosMw].Status==01||Mittelwert[PosMw].Status==11){
			sprintf(AusgabeZeileWerte,"\t%hd\t%i\t\t%i\t\t\t%02hd\n",Mittelwert[PosMw].ZeitIndex,Mittelwert[PosMw].Wert,(int)Mittelwert[PosMw].MWert,Mittelwert[PosMw].Status);
		}else{
			//AusgabeZeile für Werte erstellen mit status *0, für diese werte kann der Mittelwert berechnet werden und wird daher als Gleitkommazahl ausgegeben
			sprintf(AusgabeZeileWerte,"\t%hd\t%i\t\t%lf\t\t%02hd\n",Mittelwert[PosMw].ZeitIndex,Mittelwert[PosMw].Wert,Mittelwert[PosMw].MWert,Mittelwert[PosMw].Status);
		}
		//ausgabe der werte auf der konsole
		printf("%s",AusgabeZeileWerte);
		//ausgabe der werte in datei (zeilenweise)
		fputs(AusgabeZeileWerte,fp);
	}
	//schließe datei
	fclose(fp);

	/*
	for(i=0;i<strlen((md+i)->Id)+strlen(mpId[i])+17+1;i++){

	}

	//fp=open


	 * i=0
	 * MWF=2
	 *

	//berechne alle für die id gemessenen werte
	for(i=MAXMESSZEITPUNKTE*MesswertId;i<mpId[MesswertId]+MAXMESSZEITPUNKTE*MesswertId;i++){
		SummeFensterWerte=SummeFensterWerte+(md+i)->Wert;
		if(AktuellerMesswert>=MittelwertFenster-1){
			Mittelwert[Divisor].Wert=(double)SummeFensterWerte/Divisor;
			Mittelwert[Divisor].Status[0]=(md+i)->Status;
			Mittelwert[Divisor].Status[1]=1;

		}else{
			Mittelwert[Divisor].Wert=(md+i)->Wert;
			Mittelwert[Divisor].Status[0]=(md+i)->Status;
			Mittelwert[Divisor].Status[1]=0;
		}
		printf("%i\t\t%i\t\t%lf\t\t%i%i\n",(md+i)->ZeitIndex,(md+i)->Wert,Mittelwert[Divisor].Wert,Mittelwert[Divisor].Status[0],Mittelwert[Divisor].Status[1]);
		Divisor++;
		AktuellerMesswert++;
	}



	/*

	for(i=0, StartIndex=0;i<MesswertId;i++){
		StartIndex+=mpId[i];
	}


	printf("\n Ausgeben der verrechneten Messwerte und der Mittelwerte in Datei ...");
	fp=fopen(NameAusgabedatei,"w+");
	if(fp!=NULL){

		sprintf(AusgabeZeile,"%s\t%s%d%s\t%s%d%s\t%s", "Messzeitpunkt T","Messwert X",MesswertId, "(T)", "Mittelwert ueber ", MittelwertFenster, " Messwerte", "Status" );
		fwrite(&AusgabeZeile,strlen(AusgabeZeile),1,fp);

		fclose(fp);
	}else{
		printf("Datei konnte nicht geöffnet werden.\n");
				printf("Drücken sie enter zum beenden\n");
		scanf("%c",&AusgabeZeile[0]);
	}

	 */
	return (AnzahlMittelwerte);
}

/*
 Funktion  : word16 LiesMesswerte(Messung *md, word16 *mpId)
 Aufgabe   : Liest maximal MAXMESSZEITPUNKTE strukturierte Messwerte aus der MESSDATEI
 	 	 	 für alle enthaltenen Messstellen in den Messwertevektor md und vermerkt die
 	 	 	 Anzahl der für jede Messstelle eingelesenen Messwerte im Vektor mpId
 Eingaben  : md = strukturierter Messwertevektor enthält alle eingelesenen Messwerte in der
 	 	 	 von der MESSDATEI vorgegebenen Reihenfolge. Es wird erwartet, dass die Messzeitpunkte
 	 	 	 zu jeder Messstelle in aufsteigender Reihenfolge vorliegen.
 	 	 	 mpId = Vektor mit Anzahl der gelesenen Messwerte zu jeder erlaubten Messstelle (Id)
 Ausgaben  : Anzahl gelesener Messwerte insgesamt
 Autor     :
 Version   : 01
 Datum der letzten Änderung: 2013-01-09
 */
word16 LiesMesswerte( Messung *md, word16 *mpId){
	word16 Spalte=0; //Position in EineZeile, wird benutzt um die aus der Datei ausgelesenen Messwerte in EineZeile zu übertragen. Wird nach jedem eingelesenen Zeichen um 1 hochgezählt
	word16 j=0; //anzahl eingelesener messwerte / position in Messung. Wird nach dem einlesen jeder Zeile um 1 hochgezählt
	word16 i=0; //zum rücksetzen der ZahlTemp Werte auf 0
	word16 k=0,l=0;
	//index für Id
	char EineZeile[41];
	char *eZp=NULL;																					//geändert *eZp=NULL
	size_t result=0;
	//zwischenspeicher der einzelnen stellen aus datei
	char SpeicherStelle;
	//zwischenspeicher der einzelnen zahlen
	char ZahlTemp[100]={'0'};
	//zwischenspeicher der messwerte
	char WertTemp[100]={'0'};
	//position in Zeile
	word16 PosZeile=0;
	//marker für nachkommastellen
	BOOL Nachk=FALSE;
	//abbruch des programms
	char Abbruch='0';

	//filepointer
	FILE *fp;

	//ausgabe der aktion die das programm macht auf dem bildschirm
	printf("\n Einlesen der Messwerte von Datei ...\n");

	//öffne messdatei lesend
	fp=fopen(MESSDATEI,"r");

	//prüfe ob datei vorhanden, wenn nicht gebe fehlermeldung aus und eingabeaufforderung zum beenden des programms
	if(fp==NULL){
		//Datei nicht vorhanden
		printf("Einlesen nicht moeglich, Datei nicht vorhanden\n");
		printf("Drücken sie enter zum beenden des Programms");
		//eingabeaufforderung abbruch wird nur als temporäre variable genommen, wird nicht weiter verarbeitet
		scanf("%c",&Abbruch);
		//kehre zurück zur main
		return 0;
	}else{
		//Datei vorhanden






		//lese Dateiinhalt bis zum Ende der Datei
		while((SpeicherStelle=fgetc(fp))!=EOF){
			//setze bei jeder neuen Zeile die Position Spalte auf den Anfang von EineZeile
			Spalte=0;
			//lese jede zeile der Datei in EineZeile
			while(SpeicherStelle!=10){
				//ändere , in .
				if(SpeicherStelle==','){
					EineZeile[Spalte]='.';

				}else{
					//Lese Zahl aus Datei in die nächste Stelle in EineZeile
					EineZeile[Spalte]=SpeicherStelle;

				}
				//Zähle Spalte hoch um das nächste Zeichen aus der Datei zu lesen
				Spalte++;
				//lese nächstes Zeichen aus Datei
				SpeicherStelle=fgetc(fp);
			}

			//setze string ende
			EineZeile[Spalte]='\0';

			//Gebe zuletzt gelesene Zeile aus
			printf("%s\n",EineZeile);

			//übernehme werte jeweils bis zum nächsten + für alle werte

			//rücksetzen der position auf anfang der Zeile
			PosZeile=0;
			i=0;
			//übernehme zahlen bis zum nächsten . (id)
			while(EineZeile[PosZeile]!='.'){
				ZahlTemp[i]=EineZeile[PosZeile];
				PosZeile++;
			}

			(md+j)->Id=atoi(ZahlTemp);
			printf("Id%i ",(md+j)->Id);

			//zähle Messzeitpunkte pro id
			mpId[(md+j)->Id]=mpId[(md+j)->Id]+1;

			//rücksetzen der ZahlTemp werte
			for(i=0;i<100;i++){
				ZahlTemp[i]='\0';
			}

			//nächster Wert Zeit
			PosZeile++;
			i=0;

			//übernehme zahlen bis zum nächsten . (Zeit)
			while(EineZeile[PosZeile]!='.'){
				ZahlTemp[i]=EineZeile[PosZeile];
				PosZeile++;
			}

			(md+j)->ZeitIndex=atoi(ZahlTemp);
			printf("Zeit%i ",(md+j)->ZeitIndex);

			//rücksetzen der ZahlTemp werte
			for(i=0;i<100;i++){
				ZahlTemp[i]='\0';
			}


			//nächster Wert Wert
			PosZeile++;
			i=0;
			//übernehme zahlen bis zum nächsten . (Wert)
			while(EineZeile[PosZeile]!='.'){
				WertTemp[i]=EineZeile[PosZeile];
				PosZeile++;
				i++;
			}

			//nächster Wert AnzahlNachkommastellen
			PosZeile++;
			//übernehme zahlen bis zum nächsten Zeilenende (AnzahlNachkommastellen)
			(md+j)->AnzahlDezimaleNachkommastellen=atoi(&EineZeile[PosZeile]);

			//übernehme den vorkommaanteil von wert
			for(i=0;i<strlen(WertTemp)-(md+j)->AnzahlDezimaleNachkommastellen;i++){
				ZahlTemp[i]=WertTemp[i];
			}

			//rücksetzen der WertTemp werte
			for(i=0;i<100;i++){
				WertTemp[i]='\0';
			}

			//schreibe vorkommaanteil des wertes in struktur
			(md+j)->Wert=atoi(ZahlTemp);

			printf("Wert%i\n",(md+j)->Wert);

			//rücksetzen der ZahlTemp werte
			for(i=0;i<100;i++){
				ZahlTemp[i]='\0';
			}

			//markiere status ( wird im programm später geändert)
			(md+j)->Status=1;

			/*
			//schreibe Id in Messung.id (0.Zeichen)
			(md+j)->Id=EineZeile[0]-48;

			//zähle messzeitpunkte pro id
			switch((md+j)-> Id){
			case 0:mpId[0]++;break;
			case 1:mpId[1]++;break;
			case 2:mpId[2]++;break;
			case 3:mpId[3]++;break;
			case 4:mpId[4]++;break;
			case 5:mpId[5]++;break;
			}

			//schreibe Messzeitpunkt in Messung.ZeitIndex (2.Zeichen, das Zeichen nach dem 0. ist ein Punkt)
			(md+j)->ZeitIndex=EineZeile[2]-48;

			//markiere status ( wird im programm später geändert)
			(md+j)->Status=1;


			//schreibe Messwert in Messung.Wert (wandle ab dem 4. Zeichen bis zum string ende Zeichen um in eine float zahl)
			(md+j)->Wert=atoi(&EineZeile[4]);
			 */
			//verarbeite nächste Zeile
			j++;
		}
		//schließe datei
		fclose(fp);
	}
	// Rückgabe der insgesamt eingelesenen Messwerte
	return (j);
}

/*
 Funktion  : BOOL LiesParameter(word16 *AnzahlWerte4MW, word16 *Id, word16 *AnzahlMesswerte)
 Aufgabe   :
 Eingaben  :
 Ausgaben  :
 Autor     : Kreiser
 Version   : 01
 Datum der letzten Änderung: 2013-01-09
 */
BOOL LiesParameter(word16 *AnzahlWerte4MW, word16 *id, word16 *AnzahlMesswerte){
	BOOL Error = TRUE; //variable um auf falsche eingabe zu prüfen. Der Messwert muss existieren und die Anzahl zu berücksichtigender Messwerte im Mittelwert muss <= der Anzahl der gemessenen Messwerte für diese Id sein.


	printf ("\nFuer welche MesswertId sollen Mittelwerte berechnet werden ? :\t");
	scanf("%hd",id);
	if (*id < MAXMESSSTELLEN && *id >=0){
		if (*(AnzahlMesswerte+*id)>0){
			printf ("\nWieviele Messwerte sollen im Mittelwert beruecksichtigt werden ? :\t");
			scanf("%hd", AnzahlWerte4MW);
			if ((*AnzahlWerte4MW > 0) && (*AnzahlWerte4MW <= AnzahlMesswerte[*id])){
				Error = FALSE;
			}else{
				printf("Falsche Eingabe\nDie Anzahl zu berücksichtigender Messwerte im Mittelwert muss <= der Anzahl der gemessenen Messwerte für diese Id sein.\n");
			}
		}
	}else{
		printf("Falsche Eingabe\nDer Messwert existiert nicht.\n");
	}
	return (Error);
}

/*
 Funktion  : word16 VerarbeiteMesswerte(Messung *md, word16 *mpId, word16 *AnzahlMesswerte)
 Aufgabe   : Sortiert und vervollständigt den strukturierten Messwertevektor md:
 	 	 	 Sortierung aufsteigend nach MesstellenId
 	 	 	 Auffuellen fehlender Messzeitpunkte, falls zur MessstellenId Messwerte fuer einen
 	 	 	 vorausgehenden und einen nachfolgenden Messzeitpunkt vorhanden sind (eingelesen wurden).
 	 	 	 Fuer fehlende Messzeitpunkte wird der Wert des letzten eingelesenen Messzeitpunkts kopiert.
 Eingaben  : md = strukturierter Messwertevektor enthält alle eingelesenen Messwerte in der
 	 	 	 von der MESSDATEI vorgegebenen Reihenfolge. Es wird erwartet, dass die Messzeitpunkte
 	 	 	 zu jeder Messstelle in aufsteigender Reihenfolge vorliegen.
 	 	 	 mpId = Vektor mit Anzahl der gelesenen Messwerte zu jeder erlaubten Messstelle
 	 	 	 AnzahlMesswerte = Anzahl der Werte im Vektor md
 Ausgaben  : md = strukturierter Messwertevektor enthält vervollstaendigte Messwerte zu jeder
 	 	 	 zu jeder Messstelle in aufsteigender Reihenfolge der Messzeitpunkte. Dabei sind die
 	 	 	 Messstellen ebenfalls in aufsteigender Reihenfolge im Vektor hinterlegt.
 	 	 	 mpId = Vektor mit Anzahl der vervollstaendigten Messwerte zu jeder erlaubten Messstelle.
 	 	 	 AnzahlMesswerte = Anzahl der vervollstaendigten Werte im Vektor md
 	 	 	 Rueckgabewert: Anzahl ergaenzter Messwerte insgesamt (alle Messstellen)
 Autor     :
 Version   : 01
 Datum der letzten Änderung: 2013-01-09
 */
word16 VerarbeiteMesswerte(Messung *md, word16 *mpId, word16 *AnzahlMesswerte){
	word16 Id=0; //aktuelle id
	word32 AktuellerMesswert=0; //aktueller messwert
	word16 AnzahlErgaenzteMesswerte=0; //zählt die ergänzten messwerte
	word32 ZeitIndex; //zum übertragen der messwerte in neues array vMesswerte
	word32 MaxZeitIndex[MAXMESSSTELLEN], MinZeitIndex[MAXMESSSTELLEN];
	Messung vMesswerte[MAXMESSWERTE]={0};
	word32 Zeit=0;//anpassen der zeitindexe
	printf("\nVerarbeiteMesswerte\n");


	//minimalen und maximalen Zeitindex fuer die zu verarbeitenden Messstellen bestimmen

	//bestimme minimalen Zeitindex

	//suche für alle Messstellen (Id<MAXMESSSTELLEN)
	for(Id=0;Id<MAXMESSSTELLEN;Id++){
		//fange vorne an zu zählen/überprüfen
		for(AktuellerMesswert=0;AktuellerMesswert<*AnzahlMesswerte;AktuellerMesswert++){
			//wenn die Id mit i übereinstimmt ist die erste messung mit der id i, da die Messungen zeitlich geordnet sind ist dies die erste messung der id Id
			if(((md+AktuellerMesswert)->Id)==Id){
				//speichere den minimalen zeitindex der messung i  in MinZeitIndex an der Stelle Id
				MinZeitIndex[Id]=((md+AktuellerMesswert)->ZeitIndex);
				//breche die weitere suche für diese id ab, da das ergebnis für diese id gefunden wurde
				break;
			}
		}
		//gebe den gefundenen Minimalen Zeitindex für die aktuelle Id (i) aus
		printf("Minimaler Zeitindex bei Messung %i = %i\n",Id,MinZeitIndex[Id]);
	}


	//bestimme maximalen Zeitindex

	//suche für alle Messstellen  (i<MAXMESSSTELLEN)
	for(Id=0;Id<MAXMESSSTELLEN;Id++){
		//fange hinten an zu zählen/überprüfen
		for(AktuellerMesswert=*AnzahlMesswerte-1;AktuellerMesswert>0;AktuellerMesswert=AktuellerMesswert-1){
			//wenn die Id mit i übereinstimmt ist die letzte messung mit der id Id, da die Messungen zeitlich geordnet sind ist dies die letzte messung der id Id
			if(((md+AktuellerMesswert)->Id)==Id){
				//speichere den maximalen zeitindex der messung Id  in MaxZeitIndex an der Stelle Id
				MaxZeitIndex[Id]=((md+AktuellerMesswert)->ZeitIndex);
				mpId[Id]=MaxZeitIndex[Id]+1;
				//breche die weitere suche für diese id ab, da das ergebnis für diese id gefunden wurde
				break;
			}
		}
		printf("Maximaler Zeitindex bei Messung %i = %i\n",Id,MaxZeitIndex[Id]);
	}


	// Berechnung der Anzahl vorhandener Messzeitpunkte zur Messstelle und Anzahl der vorhandenen Messstellen

	//Verarbeite alle erlaubten MessstellenIds
	//kopiere für alle Ids die werte zeitlich geordnet aus Messwerte in vMesswerte
	for(Id=0;Id<MAXMESSSTELLEN;Id++){ //i: Laufindex Messwertevektor, k: Laufindex vervollst. Messwertevektor
		//untersuche alle vorhandenen Messwerte
		printf("anzahl messwerte %i\n",*AnzahlMesswerte);
		for(AktuellerMesswert=0;AktuellerMesswert<*AnzahlMesswerte;AktuellerMesswert++){
			//untersuche alle vorhandenen Messwerte ob sie die aktuelle id haben
			if((md+AktuellerMesswert)->Id==Id){
				//wenn die id des aktuellen Messwerts mit der aktuellen Id übereinstimmt, kopiere die werte des aktuellen Zeitindex der aktuellen Id aus Messwerte
				//an die Position des Zeitindex in vMesswerte.
				//und springe bei jeder neuen Id um MAXMESSZEITPUNKTE(50) nach vorne
				//d.h. jede Id bekommt seine aufgenommenen Werte geordnet an die Position an der sie gemessen wurde in einem neuen 50 felder großen struktur array platziert
				ZeitIndex=((md+AktuellerMesswert)->ZeitIndex)+Id*MAXMESSZEITPUNKTE;
				(vMesswerte+ZeitIndex)->Id=(md+AktuellerMesswert)->Id;
				(vMesswerte+ZeitIndex)->ZeitIndex=(md+AktuellerMesswert)->ZeitIndex;
				(vMesswerte+ZeitIndex)->Wert=(md+AktuellerMesswert)->Wert;
				(vMesswerte+ZeitIndex)->AnzahlDezimaleNachkommastellen=(md+AktuellerMesswert)->AnzahlDezimaleNachkommastellen;
				(vMesswerte+ZeitIndex)->Status=(md+AktuellerMesswert)->Status;
				/*			printf("\nalt ");
				printf("Id %i Zeit %i Wert %i",(md+AktuellerMesswert)->Id,(md+AktuellerMesswert)->ZeitIndex,(md+AktuellerMesswert)->Wert);
				printf("\nneu ");
				printf("Id %i Zeit %i Wert %i",(vMesswerte+ZeitIndex)->Id,(vMesswerte+ZeitIndex)->ZeitIndex,(vMesswerte+ZeitIndex)->Wert);
				 */	}
		}
	} //for i






	//ergänze fehlende messwerte
	for(AktuellerMesswert=0;AktuellerMesswert<MAXMESSSTELLEN*MAXMESSZEITPUNKTE-1;AktuellerMesswert++){ //i: Laufindex Messwertevektor, k: Laufindex vervollst. Messwertevektor

		//wenn messwert vorhanden, weiter ansonsten kopiere letzten messwert auf den nächsten
		if((vMesswerte+AktuellerMesswert+1)->Status!=1){
			//wenn im nächsten messwert der status nicht 1 ist wurde er nicht gemessen und wird mit dem vorherigen messwert (aktueller messwert) überschrieben und der status auf 10 gesetzt
			//ansonsten wird der status auf 0 für gemessen gesetzt
			(vMesswerte+AktuellerMesswert+1)->Id=(vMesswerte+AktuellerMesswert)->Id;
			(vMesswerte+AktuellerMesswert+1)->ZeitIndex=(vMesswerte+AktuellerMesswert)->ZeitIndex;
			(vMesswerte+AktuellerMesswert+1)->Wert=(vMesswerte+AktuellerMesswert)->Wert;
			(vMesswerte+AktuellerMesswert+1)->AnzahlDezimaleNachkommastellen=(vMesswerte+AktuellerMesswert)->AnzahlDezimaleNachkommastellen;
			//markiere ergänzten messwert mit 10
			(vMesswerte+AktuellerMesswert+1)->Status=10;
			AnzahlErgaenzteMesswerte++;
		}else{
			//markiere gemessenen messwert mit 0
			(vMesswerte+AktuellerMesswert+1)->Status=0;
		}
	}
	//korriere status beim 0. Messwert, sofern dieser gemessen wurde (denn dann wurde er in LiesMesswerte auf 1 gesetzt),
	//das ist nötig da die vorige Schleife nur bei dem nächsten messwert überprüft ob er existiert. (sie fängt nicht bei 0 sondern bei 1 an
	if((vMesswerte)->Status==1){
		(vMesswerte)->Status=0;
	}

	//zeitindexe anpassen so dass sie fortlaufend sind
	for(AktuellerMesswert=0;AktuellerMesswert<MAXMESSWERTE;AktuellerMesswert++){
		if(AktuellerMesswert%MAXMESSZEITPUNKTE==0)Zeit=0;//rücksetzen der Zeit bei der nächsten Messstelle
		(md+AktuellerMesswert)->ZeitIndex=Zeit;
		Zeit++;
	}
	printf("Id\tZeitindex\tWert\tStatus\n");
	//werte zurück kopieren
	for(AktuellerMesswert=0;AktuellerMesswert<MAXMESSWERTE;AktuellerMesswert++){
		(md+AktuellerMesswert)->Id=(vMesswerte+AktuellerMesswert)->Id;
		//(md+AktuellerMesswert)->ZeitIndex=(vMesswerte+AktuellerMesswert)->ZeitIndex;
		(md+AktuellerMesswert)->Wert=(vMesswerte+AktuellerMesswert)->Wert;
		(md+AktuellerMesswert)->AnzahlDezimaleNachkommastellen=(vMesswerte+AktuellerMesswert)->AnzahlDezimaleNachkommastellen;
		(md+AktuellerMesswert)->Status=(vMesswerte+AktuellerMesswert)->Status;
		/*	printf("%hd\t%i\t\t%i\t%hd\n",(md+AktuellerMesswert)->Id,(md+AktuellerMesswert)->ZeitIndex,(md+AktuellerMesswert)->Wert,(md+AktuellerMesswert)->Status);
		printf("\nneu ");
		printf("Id %i Zeit %i Wert %i",(md+AktuellerMesswert)->Id,(md+AktuellerMesswert)->ZeitIndex,(md+AktuellerMesswert)->Wert);
		printf("\nalt ");
		printf("Id %i Zeit %i Wert %i\n",(vMesswerte+AktuellerMesswert)->Id,(vMesswerte+AktuellerMesswert)->ZeitIndex,(vMesswerte+AktuellerMesswert)->Wert);
		 */
	}






	/*
	AnzahlErgaenzteMesswerte=k-*AnzahlMesswerte;
	 *AnzahlMesswerte=k; //Anzahl inkl. ergaenzter Messwerte
	//Zurueckspeichern der verarbeiteten Messwerte in den Messwertevektor *md
	//memcpy((*md+j)->Wert, (*md+j-1)->Wert, strlen((*md+j-1)->Wert));
	 */
	return (AnzahlErgaenzteMesswerte);
}

int main(void){
	Messung  Messwerte[MAXMESSWERTE]={{0}}; //erstelle 250 (MAXMESSZEITPUNKTE*MAXMESSSTELLEN= 50*5) strukturen zum aufnehmen der daten und initialisiere alle Werte der struktur mit 0
	word16   AnzahlMesszeitpunkteId[MAXMESSSTELLEN]={0}; //Anzahl der Messzeitpunkte pro Id
	word16   AnzahlEingelesen=0;//anzahl der eingelesenen messwerte
	word16 AnzahlMesswerte=0; //anzahl der eingelesenen messwerte + anzahl der ergänzten messwerte
	word16 AnzahlErgaenzteMesswerte=0; //anzahl der ergänzten messwerte
	word16 AnzahlWerteImMittelwert=0;
	word16   AnzahlMittelwerte, Id, i;
	BOOL     Ende;



	//Lese Messwerte ein, zähle anzahl messungen pro id und lese die gesammtanzahl der eingelesenen Messwerte in AnzahlEingelesen
	AnzahlEingelesen = LiesMesswerte(Messwerte, AnzahlMesszeitpunkteId);

	//addiere die anzahl der eingelesenen messwerte zur gesamtanzahl
	AnzahlMesswerte=AnzahlEingelesen;

	//gebe die anzahl der eingelesenen messwerte aus
	printf ("\nAnzahl eingelesener Messwerte:\t %d\n", AnzahlEingelesen);

	//schau bei allen möglichen messstellen ob die anzahl der messungen >0 ist und gebe dann die anzahl der messungen pro id aus
	for(i=0;i<MAXMESSSTELLEN;i++){
		//wenn anzahl der messungen pro id >0
		if(AnzahlMesszeitpunkteId[i]>0){
			//gebe anzahl messungen pro id auf dem bildschirm aus
			printf ("Anzahl eingelesener Messwerte zur MesstellenId %d:\t %d\n", i, AnzahlMesszeitpunkteId[i]);
		}
	}

	//ergänze die fehlenden messwerte
	AnzahlErgaenzteMesswerte = VerarbeiteMesswerte(Messwerte, AnzahlMesszeitpunkteId, &AnzahlMesswerte);



	printf ("\nGesamtanzahl ergaenzter Messwerte:\t %i", AnzahlErgaenzteMesswerte);
	for(i=0;i<MAXMESSSTELLEN;i++){
		if(AnzahlMesszeitpunkteId[i]>0){
			printf ("\nAnzahl verarbeitbarer Messwerte zur MesstellenId %d:\t %d", i, AnzahlMesszeitpunkteId[i]);
		}
	}

	do{
		Ende = LiesParameter(&AnzahlWerteImMittelwert, &Id, AnzahlMesszeitpunkteId);

		if (Ende==FALSE){
			AnzahlMittelwerte = BerechneMittelwerte(Messwerte, Id, AnzahlWerteImMittelwert, AnzahlMesswerte, AnzahlMesszeitpunkteId);

		}

	}
	while(Ende);
	printf("Ende");

	return(0);
}

